import sqlite3 from 'sqlite3';
import {pathDbFromRepos, connect} from '../../database/index.js';
import Reservation from '../models/index.mjs'

export class ReservationRepo {

    constructor() {
        this.pathDB = pathDbFromRepos;
        this.DB = connect(this.pathDB);
    }

    /**
     * Creates a new reservation for each cart item.
     * If any of the cart items cannot be reserved, no reservations should be created.
     * @param {number} userId
     * @param {Array<number>} cartItems - The IDs of the cart items to be reserved.
     * @returns {Array<Reservation>} - The reservations that were created, with the new IDs generated by the system.
     */
    async createReservation(userId, createdAt, canceledAt, totPrice) {
        let query = 'INSERT INTO RESERVATION (userId, createdAt, canceledAt, totPrice) VALUES (?, ?, ?, ?)';
        return new Promise ((resolve, reject) => {
            this.DB.run(query, [userId, createdAt, canceledAt, totPrice], (err) => {
                if (err) {
                    console.error('Error inserting reservation: ', err.message);
                    reject(err);
                } else {
                    console.log('Reservation inserted successfully');
                    resolve(null);
                }
            })
        })
    }

    async updateReservation(id, userId, createdAt, canceledAt, totPrice) {
        let query = 'UPDATE RESERVATION SET userId = ?, createdAt = ?, canceledAt = ?, totPrice = ? WHERE id = ?';
        return new Promise ((resolve, reject) => {
            this.DB.run(query, [userId, createdAt, canceledAt, totPrice, id], (err) => {
                if (err) {
                    console.error('Error updating reservation: ', err.message);
                    reject(err);
                } else {
                    console.log('Reservation updated successfully');
                    resolve(null);
                }
            })
        })
    }

    /**
     * Returns ALL the reservations made by a user, even the cancelled ones.
     * @param {number} userId
     * @returns {Array<Reservation>}
     */
    async listReservationsByUser(userId) {
    }

    /**
     * Returns ALL the reservations made for an establishment, even the cancelled ones.
     * @param {number} estId
     * @returns {Array<Reservation>}
     */
    async listReservationsByEstablishment(estId) {}

    /**
     * Cancel a reservation, without deleting it.
     * @param {number} resId - The ID of the reservation to be cancelled.
     */
    async cancelReservation(resId) {}
}
