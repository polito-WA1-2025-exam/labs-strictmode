import Bag from "../models/Bag.mjs";
import sqlite3 from 'sqlite3';
import {pathDbFromRepos, connect} from '../../database/index.js';
import { Bag } from '../models/index.mjs'

export class BagRepo {

    constructor() {
        this.pathDB = pathDbFromRepos;
        this.DB = connect(this.pathDB);
    }

    /** 
     * Creates a new empty bag.
     * @param {Bag} bagType - Type of the bag (e.g., "regular", "surprise").
     * @param {number} estId - The establishment ID associated with the bag.
     * @param {number} size - "small", "medium", "large".
     * @param {Array<string>} tags - Example: ["vegan", "gluten free"].
     * @param {number} price - The price of the bag.
     * @param {string} pickupTimeStart - The start time for pickup in ISO 8601 format.
     * @param {string} pickupTimeEnd - The end time for pickup in ISO 8601 format.
     * @returns {Bag} - The bag that was added to the cart, with the new ID generated by the system.
     */
    async createBag(bagType, estId, size, tags, price, pickupTimeStart, pickupTimeEnd, reservedBy, reservationId) {
        let query = 'INSERT INTO BAG (bagType, estId, size, tags, price, pickupTimeStart, pickupTimeEnd, reservedBy, reservationId) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)';
        this.DB.run(MediaQueryList, [bagType, estId, size, tags, price, pickupTimeStart, pickupTimeEnd, reservedBy, reservationId], (err) => {
            if (err) {
                console.error('Error inserting bag: ', err.message);
            } else {
                console.log('Bag inserted successfully');
            }
        })
    }
    
    /**
     * Returns the bag with the given ID.
     * @param {number} bagId
     * @returns {Bag}
     */
    async getBag(bagId) {
        let query = 'SELECT * FROM BAG WHERE = ?'
        return new Promise((resolve, reject) => {
            this.DB.all(query, [resolve, reject], (err, row) => {
                if (err) {
                    console.error('Error inserting bag: ', err.message);
                    reject(err);
                } else {
                    if (row) {
                        let id = row[0].bagId;
                        let bagType = row[0].bagType;
                        let estId = row[0].estId;
                        let size = row[0].size;
                        let tags = row[0].tags;
                        let price = row[0].price;
                        pickupTimeStart = row[0].pickupTimeStart;
                        pickupTimeEnd = row[0].pickupTimeEnd;
                        let reservedBy = row[0].reservedBy;
                        let reservationId = row[0].reservationId;

                        let bag = new Bag(id, bagType, estId, size, tags, price, pickupTimeStart, pickupTimeEnd, reservedBy, reservationId);
                        resolve(bag);
                    } else {
                        resolve(null);
                    }
                }
            })
        })
    }

    /**
     * Lists all the available bags, from every establishment.
     * A bag is available if no one reserved it yet and it can be picked up now.
     * 
     * @returns {Array<Bag>}
     */
    async listAvailable() {}

    /**
     * Creates and adds a new item to the bag.
     * @param {number} bagId
     * @param {string} name
     * @param {number} quantity - Must always be greater than 0.
     * @returns {BagItem} - The item that was added to the bag, with the ID generated by the system.
     */
    async addItem(bagId, name, quantity) { }

    /**
     * Remove and deletes the item in the bag.
     * @param {number} bagId
     * @param {number} itemId
     */
    async removeItem(bagId, itemId) { }

    /**
     * Updates the attributes of an item in the bag.
     * @param {number} bagId
     * @param {string} name
     * @param {number} quantity - Must always be greater than 0.
     */
    async updateItem(bagId, itemId, name, quantity) { }

}